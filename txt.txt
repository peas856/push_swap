https://github.com/akhossanX/push_swap

https://velog.io/@jongeun/pushswap-Day-01

1. 파싱
- 성능테스트(3일때, 5일때 등) -> n == 3일때 새로 작성해주고 push 함수 따로 빼줘서 길이 줄여주기 
- Makefile 체크하기


https://velog.io/@jongeun/pushswap-Day-06.-%ED%8C%8C%EC%8B%B1-%EC%B6%94%EA%B0%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B3%B5%EB%B6%80

2. 

https://velog.io/@jongeun/pushswap-Day-02.-Double-Linked-List-%EB%A7%8C%EB%93%A4%EA%B8%B0


no more than 2-3 operations for 3 integers
no more than 12 operations for 5 integers
no more than 700 operations for 100 integers
no more than 5300 operations for 500 integers

방법 1
처음 생각했던 것은, b_to_a()에 들어가기 전까지 a_to_b()만 반복할 때는 rrr과 rra가 의미없이 돌아간다는 것이다.
그걸 해줘도 스택 a는 하기 전과 똑같기 때문에, rrb만 해주면 된다.

이것만 처리해도 확 줄일 수 있을 거라고 생각했다.

b_to_a()에 한 번도 안 들어갔을 때만 rrr과 rra를 안 하면 되는 거니까, b_to_a()에 한 번이라도 들어갔는지를 확인하는 변수를 만들었다.
int형 cnt 변수를 선언하고 0으로 초기화했다.
그리고 처음 push_swap()에서 a_to_b()를 호출할 때 &cnt로 넣어줬다.
b_to_a()에서도 주소값을 보내서 다른 함수에서 바뀐 값을 그대로 가지고 다니게 했다.

a_to_b()에서는 cnt의 값을 변경하지 않고, b_to_a()에 들어가면 기장 먼저 cnt 값을 +1 해준다.
이렇게 하면 한 번이라도 b_to_a()에 들어갔으면 cnt는 0이 아닌 값을 가지게 될 것이다.
이제 a_to_b()에서 rrr과 rra를 할 때, cnt 값이 0보다 큰지를 확인해서 0보다 클 때만 rrr과 rra를 해준다. 0보다 크지 않을 때는 rrb만 해준다.

방법 2
사실 이걸 먼저 했다.

hyunlee님이 알려주셔서 했다. Thanks~!

처음부터 인자가 5개만 들어왔을 때 말고, 함수를 막 호출하다가 정렬해야 하는 노드가 5개일 때를 처리했다.

스택 a에서는 5개 중에 중간값을 기준으로 중간값보다 작은 값들은 pb 했다.
그러면 이제 3개가 남는데, 이건 이전에 노드 3개를 정렬하는 함수를 그대로 사용했다.
스택 b로 보낸 노드 2개도 정렬해서 pa 해줬다.

스택 b에서는 스택 a와 반대로 정렬해야 하니까 5개 중에 중간값을 기준으로 중간값보다 크거나 같은 값들을 pa 했다.
그러면 이제 스택 a에 보낸 값 3개를 정렬한다.
그리고 스택 b에 남아있는 노드 2개도 정렬해서 pa 해줬다.

방법 1만 해도 확~! 줄긴 하는데, 이것까지 해줘야 100개를 정렬할 때 안정적으로 650개 내외로 나왔던 것 같다.